class MinStack {
public:
    /** initialize your data structure here. */

    stack<int> stack1,stack2;

    MinStack() {
       
    }
    



    void push(int x) {
        if(stack2.empty())
        {
            stack2.push(x);
        }
        else if(stack2.top() >= x)//注意这块的判断
            stack2.push(x);
        stack1.push(x);
    }
    
    void pop() {
        if(stack1.top() == stack2.top())
            stack2.pop();
        stack1.pop();
    }
    
    int top() {
        return stack1.top();
    }
    
    int getMin() {
        return stack2.top();
    }
};


class Solution {
public:
	string compressString(string S) {
		int pre = 0, next = 0;

		string newS;
		while (pre < S.size())
		{
			int count = 0;
			while (S[pre] == S[next])
			{
				next++;
				count++;
			}
			newS.push_back(S[pre]);

            if(count>=10)
            {
                int num = count;
                vector<int> v;
                while(num)
                {
                    v.push_back((num%10));
                    num /= 10;
                }

                for(int i = v.size()-1;i>=0;--i)
                {
                    newS.push_back((v[i] + '0'));
                }
                v.clear();
            }
            else{
                newS.push_back((count+'0'));
            }
			pre = next;
		}

        if(newS.size() >= S.size())
            return S;
		return newS;
	}
	
};




class Solution {
public:
    void reverseOne(string& s)
    {
        char head = s[0];

        for(int i = 0;i < s.size()-1;++i)
        {
            s[i] = s[i+1];
        }
        s[s.size()-1] = head;
    }

    string reverseLeftWords(string s, int n) {
        while(n--)
        {
            reverseOne(s);
        }
        return s;
    }
};

class Solution {
public:
    string reverseLeftWords(string s, int n) {

        string newStr;
        int i = n;
        
        int count = s.size()-n;
        while(count--)
        {
            newStr.push_back(s[i++]);
        }
        int j = 0;
        while(j<n)
        {
            newStr.push_back(s[j++]);
        }
        
        return newStr;
    }
};

class Solution {
public:
	vector<string> res;
	bool judge(string a, string b)//判断是否相等
	{
		int time = b.size() - a.size();
		for (int i = 0; i <= time;++i)
		{
			int j = 0;
			int index = i;
			for (; j < a.size(); j++)
			{
				if (a[j] != b[index])
					break;
				else
				{
					index++;
				}
			}
			if (j == a.size())
				return true;
		}
		return false;
	}

	bool find_str(vector<string> a,string b)
	{
		for (int i = 0; i < a.size(); ++i)
		{
			if (a[i] == b)
				return false;
		}
		return true;
	}

	vector<string> stringMatching(vector<string>& words) {
		
		for (int i = 0; i < words.size(); ++i)
		{
			for (int j = 0; j < words.size(); ++j)
			{
				if (i != j)
				{
					if (words[i].size() < words[j].size())
					{
						if (judge(words[i], words[j]))
						{
							if (find_str(res,words[i]))//避免出现重复字符串
								res.push_back(words[i]);
						}	
					}
				}
			}
		}
		return res;
	}
};




class Solution {
public:
	int balancedStringSplit(string s) {
		int numR = 0, numL = 0;
		int count = 0;

		for (int i = 0; i < s.size(); ++i)
		{
			
			if (s[i] == 'R')
				++numR;
			else if (s[i] == 'L')
				++numL;

			if (numR == numL && numR != 0)
			{
				numL = 0;
				numR = 0;
				count++;
			}
		}
		return count;
	}
};

class Solution {
public:
    bool isFlipedString(string s1, string s2) {
        if(s1.size() == 0 && s2.size() == 0)
            return true;
        if(s1.size()!=s2.size()) 
            return false;

        s2 = s2 +s2;

        for(int i = 0;i<s1.size();++i)
        {
            if(s1[0] == s2[i])
            {
                string tmp = s2.substr(i,s1.size());
                if(s1 == tmp)
                    return true;
            }
        }
        return false;
    }
};

	bool isFlipedString(string s1, string s2) {
		if (s1.size() != s2.size())
			return false;
		
		int index = 0;
		while (s1[index] != s2[0])
			index++;

		
		
		int j = 0;
		int i = index;
		for (i = index; i < s1.size(); ++i)
		{
			
			if (s1[i] == s2[j++])
				continue;
			else
				break;
		}
		if (i == s1.size())
		{
			int i = 0, j = s2.size() - index;
			while (index--)
			{
				if (s1[i++] != s2[j++])
					break;
			}
			if (index == -1)
				return true;
			else
				return false;
		}
		return false;

	}



